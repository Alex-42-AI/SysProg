Write a C program, that ignores the SIGPIPE signal. It creates a pipe, closes its read descriptor and writes in it. It then writes on the standard output. What's the result?
Write a C program, that processes the SIGPIPE signal with an appropriate function. It creates a pipe, closes its reading descriptor and writes in it. It then writes on the standard output. What's the result?
Write a C program, that starts a process. Without using the wait() function, it waits for it to finish and outputs an appropriate message.
Write a C program, that constantly increases a counter and every second it prints it out (without using sleep()).
Write a C program, that constantly increases a counter, every second it prints it out and if Ctrl+C is presses, it resets it and continues.
Write a C program, that starts a process. The descendant processes the SIGTERM signal and outputs an appropriate message. The parent sends twice, every second, the SIGTERM signal to its descendant. What's the result?
