Създаване (отваряне) на опашка за съобщения
#include <fcntl.h>
#include <sys/stat.h>
#include <mqueue.h>
mqd_t mq_open(const char *name, int oflag[, mode_t mode, struct mq_attr *attr]) - създава (отваря) опашка за съобщения

oflag:
O_RDONLY - отваря опашката само за четене
O_WRONLY - отваря опашката само за писане
O_RDWR - отваря опашката за четене и писане
O_NONBLOCK - отваря опашката в режим без блокиране (операцийте завършват с грешка EAGAIN)
O_CREAT - ако опашката не съществува, се създава
O_EXCL - заедно с O_CREAT, ако опашката съществува връща грешка EEXIST

Структура за атрибути на опашка
#include <mqueue.h>
struct mq_attr {
 long mq_flags; - флагове: 0 или O_NONBLOCK
 long mq_maxmsg; - максимален брой съобщения в опашката
 long mq_msgsize; - максимален размер на съобщение (в байтове)
 long mq_curmsgs; - брой съобщения в опашката
};

Затваряне на опашка
#include <mqueue.h>
mqd_t mq_close(mqd_t mqdes) - затваря опашка за съобщения

Изпращане на съобщение
#include <mqueue.h>
mqd_t mq_send(mqd_t mqdes, const char *msg_ptr, size_t msg_len, unsigned msg_prio) - изпраща съобщение

Получаване на съобщение
#include <mqueue.h>
ssize_t mq_receive(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned *msg_prio) - получава съобщение

Получаване/задаване на атрибути
#include <mqueue.h>
mqd_t mq_getattr(mqd_t mqdes, struct mq_attr *attr) - получава атрибути
mqd_t mq_setattr(mqd_t mqdes, struct mq_attr *newattr, struct mq_attr *oldattr) - задава атрибути

Унищожаване на опашка
#include <mqueue.h>
mqd_t mq_unlink(const char *name) - унищожава опашката
