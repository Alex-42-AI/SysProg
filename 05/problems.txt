Write a C program, that starts a process. Both processes open the same file for writing and multiple times, through different time intervals, they write different text in it. What's the result?
Write a C program, that opens a file for writing and after that starts a process. Both processes, multiple times, over different time intervals, write in the file different text. What's the result?
Write a C program, that starts a process. Both processes open the same file for appending and multiple times, over different time intervals, write different text in it. What's the result?
Write a C program, that opens an existing file for reading and another for writing and then starts a process. The parent reads several symbols from the first file every second and writes them in the second one. The descendant, several times, every 2 seconds, writes text in the second file. What's the result?
Write a C program, that opens an existing file for reading and another for appending and then starts a process. The descendant reads several symbols from the first file every second and writes them in the second one. The parent writes text in the second file, every 2 seconds, until the descendant is finished. What's the result?
Write a C program, that receives the name of a command and parameters for it in the command line. The program starts a process and executes the command in it. When the process is over, it outputs its pid and its exit code.
Write a C program, that receives >=2 parameters, first - name of a command, the last - name of a file and the rest - command parameters. The program executes the command by redirecting its output into the file. Finally it outputs its exit code.
Write a C program, that receives >=3 parameters, first - name of a command, the last 2 - names of files and the rest - command parameters. The program executes the command by redirecting its input from the first file and its output to the second file. Finally, it outputs its exit code.
Write a C program, that receives >=4 parameters, first - name of a command, the last 3 - names of files and the rest - command parameters. The program executes the command by redirecting its input from the first file, its exit to the second file and its errors exit to the third file. It finally outputs its exit code.
