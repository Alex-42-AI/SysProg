Системни функции за процеси
#include <unistd.h>
int execl(const char *path, const char *arg, ...) - сменя образа на процеса
int execlp(const char *file, const char *arg, ...) - сменя образа на процеса
int execv(const char *path, char *const argv[]) - сменя образа на процеса
int execvp(const char *file, char *const argv[]) - сменя образа на процеса

#include <sys/types.h>
#include <unistd.h>
int fork(void) - поражда нов процес наследник

#include <sys/types.h>
#include <sys/wait.h>
int wait(int *status) - изчаква завършването на процес наследник
int waitpid(pid_t pid, int *status, int options) - изчаква завършването на процес наследник

WNOHANG - не чака завършване на наследник, ако няма - връща 0

bool WIFEXITED(status) - макрос за нормално завършил наследник
int WEXITSTATUS(status) - макрос за статус на нормално завършил наследник
bool WIFSIGNALED(status) - макрос за наследник прекъснат от сигнал
int WTERMSIG(status) - макрос за сигнал прекъснал наследника

#include <stdlib.h>
void exit(int status) - завършва процес

#include <sys/types.h>
#include <unistd.h>
int getpid(void) - получава номера на текущия процес
int getppid(void) - получава номера на родителския процес
